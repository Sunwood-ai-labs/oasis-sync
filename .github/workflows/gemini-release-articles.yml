name: "📰 Gemini Release Article"

on:
  workflow_run:
    workflows:
      - "📝 Gemini Release Notes"
    types:
      - completed

permissions:
  contents: write

defaults:
  run:
    shell: bash

env:
  MAX_COMMITS: 300
  MAX_FILES: 500
  MAX_CONTRIBUTORS: 200
  MAX_DIFF_LINES: 2000

jobs:
  zenn-article:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout default branch
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # ratchet:actions/checkout@v4
        with:
          ref: ${{ github.event.repository.default_branch }}
          fetch-depth: 0

      - name: Determine release tag
        id: tag
        env:
          TRIGGER_SHA: "${{ github.event.workflow_run.head_sha }}"
          HEAD_BRANCH: "${{ github.event.workflow_run.head_branch }}"
        run: |
          set -euo pipefail
          git fetch --tags --force --prune >/dev/null 2>&1 || true
          TAGS_FOR_SHA="$(git tag --points-at "${TRIGGER_SHA}" || true)"
          TAG="$(echo "${TAGS_FOR_SHA}" | head -n 1 || true)"
          if [[ -z "${TAG}" && -n "${HEAD_BRANCH}" ]]; then
            TAG="${HEAD_BRANCH}"
          fi
          if [[ -z "${TAG}" ]]; then
            echo "Could not determine tag for trigger SHA ${TRIGGER_SHA}" >&2
            exit 1
          fi
          {
            echo "tag=${TAG}"
            echo "sha=${TRIGGER_SHA}"
          } >> "$GITHUB_OUTPUT"

      - name: Prepare context
        id: ctx
        env:
          REPOSITORY: "${{ github.repository }}"
          TAG_NAME: "${{ steps.tag.outputs.tag }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
          MAX_COMMITS: "${{ env.MAX_COMMITS }}"
          MAX_FILES: "${{ env.MAX_FILES }}"
          MAX_CONTRIBUTORS: "${{ env.MAX_CONTRIBUTORS }}"
          MAX_DIFF_LINES: "${{ env.MAX_DIFF_LINES }}"
        run: |
          set -euo pipefail
          TAG="${TAG_NAME}"
          git fetch --tags --prune --force >/dev/null 2>&1 || true
          PREV_RELEASE_TAG="$(gh release list --limit 100 --json tagName --jq 'map(.tagName) | map(select(. != env.TAG)) | .[0]' || true)"
          if [[ -z "${PREV_RELEASE_TAG}" || "${PREV_RELEASE_TAG}" == "null" ]]; then
            PREV_RELEASE_TAG="$(git describe --tags --abbrev=0 "${TAG}^" 2>/dev/null || true)"
          fi
          BASE_RANGE=""
          COMPARE_URL=""
          if [[ -n "${PREV_RELEASE_TAG}" ]]; then
            BASE_RANGE="${PREV_RELEASE_TAG}..${TAG}"
            COMPARE_URL="https://github.com/${REPOSITORY}/compare/${PREV_RELEASE_TAG}...${TAG}"
          else
            BASE_RANGE="${TAG}"
          fi
          COMMITS="$(git log --no-merges --pretty=format:'- %s (%h) by %an' ${BASE_RANGE} | head -n ${MAX_COMMITS} || true)"
          CHANGED_FILES="$( ( [[ -n "${PREV_RELEASE_TAG}" ]] && git diff --name-only ${BASE_RANGE} || git ls-tree -r --name-only HEAD ) | sed 's/^/- /' | head -n ${MAX_FILES} || true)"
          CONTRIBUTORS="$(git log --format='%an' ${BASE_RANGE} | sort -u | sed 's/^/- /' | head -n ${MAX_CONTRIBUTORS} || true)"
          echo "Collecting code diff (max ${MAX_DIFF_LINES} lines)..."
          if [[ -n "${PREV_RELEASE_TAG}" ]]; then
            DIFF_CONTENT="$(git diff ${BASE_RANGE} | head -n ${MAX_DIFF_LINES} || true)"
            DIFF_STATS="$(git diff --stat ${BASE_RANGE} | head -n 100 || true)"
          else
            DIFF_CONTENT="$(git show --format="" --name-status HEAD | head -n ${MAX_DIFF_LINES} || true)"
            DIFF_STATS="$(git ls-tree -r --name-only HEAD | wc -l) files in initial release"
          fi
          {
            echo "tag=${TAG}"
            echo "prev_tag=${PREV_RELEASE_TAG}"
            echo "compare_url=${COMPARE_URL}"
            echo 'commits<<EOF'
            echo "${COMMITS}"
            echo 'EOF'
            echo 'files<<EOF'
            echo "${CHANGED_FILES}"
            echo 'EOF'
            echo 'contributors<<EOF'
            echo "${CONTRIBUTORS}"
            echo 'EOF'
            echo 'diff_stats<<EOF'
            echo "${DIFF_STATS}"
            echo 'EOF'
            echo 'diff_content<<EOF'
            echo "${DIFF_CONTENT}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Fetch release notes body
        id: notes
        env:
          TAG: "${{ steps.ctx.outputs.tag }}"
          GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
        run: |
          set -euo pipefail
          NOTES="$(gh release view "${TAG}" --json body --jq '.body' || true)"
          if [[ -z "${NOTES}" ]]; then
            echo "Release notes for ${TAG} were not found" >&2
            exit 1
          fi
          {
            echo 'summary<<EOF'
            echo "${NOTES}"
            echo 'EOF'
          } >> "$GITHUB_OUTPUT"

      - name: Locate header image
        id: header
        env:
          TAG: "${{ steps.ctx.outputs.tag }}"
          REPOSITORY: "${{ github.repository }}"
          DEFAULT_BRANCH: "${{ github.event.repository.default_branch }}"
        run: |
          set -euo pipefail
          base_dir="generated-images"
          if [[ ! -d "${base_dir}" ]]; then
            echo "No generated-images directory detected; skipping header image lookup."
            exit 0
          fi
          dir=$(find "${base_dir}" -maxdepth 1 -type d -name "release-${TAG}-*" | sort | tail -n 1 || true)
          if [[ -z "${dir}" ]]; then
            echo "No header directory found for tag ${TAG}"
            exit 0
          fi
          image=$(find "${dir}" -maxdepth 1 -type f \( -iname '*.png' -o -iname '*.jpg' -o -iname '*.jpeg' \) | sort | head -n 1 || true)
          if [[ -z "${image}" ]]; then
            echo "No header image file found in ${dir}"
            exit 0
          fi
          image_name="$(basename "${image}")"
          raw_url="https://raw.githubusercontent.com/${REPOSITORY}/${DEFAULT_BRANCH}/${image}"
          {
            echo "image_path=${image}"
            echo "image_name=${image_name}"
            echo "raw_url=${raw_url}"
          } >> "$GITHUB_OUTPUT"
          echo "Found header image: ${image}"
          echo "RAW URL: ${raw_url}"

      - name: Generate Zenn article with Gemini
        id: zenn_article
        uses: google-github-actions/run-gemini-cli@v0
        env:
          REPOSITORY: "${{ github.repository }}"
          TAG_NAME: "${{ steps.ctx.outputs.tag }}"
          PREV_TAG: "${{ steps.ctx.outputs.prev_tag }}"
          COMPARE_URL: "${{ steps.ctx.outputs.compare_url }}"
          COMMITS: "${{ steps.ctx.outputs.commits }}"
          CHANGED_FILES: "${{ steps.ctx.outputs.files }}"
          CONTRIBUTORS: "${{ steps.ctx.outputs.contributors }}"
          DIFF_STATS: "${{ steps.ctx.outputs.diff_stats }}"
          DIFF_CONTENT: "${{ steps.ctx.outputs.diff_content }}"
          RELEASE_NOTES: "${{ steps.notes.outputs.summary }}"
          HEADER_IMAGE_URL: "${{ steps.header.outputs.raw_url }}"
          HEADER_IMAGE_NAME: "${{ steps.header.outputs.image_name }}"
        with:
          gemini_api_key: "${{ secrets.GEMINI_API_KEY }}"
          gcp_workload_identity_provider: "${{ vars.GCP_WIF_PROVIDER }}"
          gcp_project_id: "${{ vars.GOOGLE_CLOUD_PROJECT }}"
          gcp_location: "${{ vars.GOOGLE_CLOUD_LOCATION }}"
          gcp_service_account: "${{ vars.SERVICE_ACCOUNT_EMAIL }}"
          use_vertex_ai: "${{ vars.GOOGLE_GENAI_USE_VERTEXAI }}"
          use_gemini_code_assist: "${{ vars.GOOGLE_GENAI_USE_GCA }}"
          settings: |
            { "debug": false, "maxSessionTurns": 10, "telemetry": { "enabled": false, "target": "gcp" } }
          prompt: |
            あなたはZennの技術記事作成のエキスパートです。以下の情報から、リリースノートを元にしたZenn記事を作成してください。
            
            # コンテキスト
            - リポジトリ: ${{ github.repository }}
            - リリースタグ: ${{ steps.ctx.outputs.tag }}
            - 前リリースタグ: ${{ steps.ctx.outputs.prev_tag }}
            - 比較URL: ${{ steps.ctx.outputs.compare_url }}
            - ヘッダー画像URL: ${{ steps.header.outputs.raw_url }}
            - ヘッダー画像ファイル名: ${{ steps.header.outputs.image_name }}
            
            # 生成済みリリースノート
            ${{ steps.notes.outputs.summary }}
            
            # 変更統計
            ${{ steps.ctx.outputs.diff_stats }}
            
            # コード差分（実際の変更内容）
            ```diff
            ${{ steps.ctx.outputs.diff_content }}
            ```
            
            # 変更コミット（抜粋）
            ${{ steps.ctx.outputs.commits }}
            
            # 変更ファイル（抜粋）
            ${{ steps.ctx.outputs.files }}
            
            # 執筆方針
            - **リポジトリ名からプロジェクト名を推測し、適切なタイトルを作成する**
            - **topics配列には技術スタック、言語、フレームワークなど関連する技術キーワードを4つ程度設定する**
            - **emojiは内容に応じて適切なものを選択する**
            - **コード差分を分析し、技術的な変更点を詳しく説明する**
            - **開発者向けに具体的で実用的な内容にする**
            - **リリースノートの内容をベースに、より詳細で読みやすい技術記事として展開する**
            - **ヘッダー画像URL（${{ steps.header.outputs.raw_url }}）があれば、frontmatterの直後にMarkdownで表示する**
            
            # 出力フォーマット
            **必ず記事全体を<article>タグで囲んで出力してください：**
            
            <article>
            ---
            title: "【リリースノート】[プロジェクト名] ${{ steps.ctx.outputs.tag }} - [主要な変更点を一言で]"
            emoji: "🚀"
            type: "tech"
            topics: ['技術1', '技術2', '技術3', '技術4']
            published: true
            ---
            
            [ヘッダー画像がある場合: ![image_name](image_url)]
            
            ## はじめに
            [プロジェクトの簡単な説明とリリースの概要]
            
            ## 主な変更点
            [リリースノートを元にした詳細な説明]
            
            ## 技術的な詳細
            [コード差分から読み取れる技術的な変更点の詳細]
            
            ### 新機能
            [新機能の詳細説明]
            
            ### 改善点
            [改善点の詳細説明]
            
            ### バグ修正
            [バグ修正の詳細説明]
            
            ## まとめ
            [今回のリリースのまとめと今後の展望]
            
            ---
            
            📚 **参考リンク**
            - [リポジトリ](https://github.com/${{ github.repository }})
            - [比較表示](${{ steps.ctx.outputs.compare_url }})
            - [リリースページ](https://github.com/${{ github.repository }}/releases/tag/${{ steps.ctx.outputs.tag }})
            </article>
            
            **重要**: 必ず<article>開始タグから</article>終了タグまでで記事全体を囲んでください。

      - name: Checkout Zenn repository
        uses: actions/checkout@v4
        with:
          repository: 'Sunwood-ai-labs/Zenn'
          token: ${{ secrets.ZENN_REPO_TOKEN }}
          path: 'zenn-repo'

      - name: Create Zenn article file
        env:
          TAG: "${{ steps.ctx.outputs.tag }}"
          REPOSITORY: "${{ github.repository }}"
          ZENN_CONTENT: "${{ steps.zenn_article.outputs.summary }}"
          HEADER_IMAGE_URL: "${{ steps.header.outputs.raw_url }}"
          HEADER_IMAGE_NAME: "${{ steps.header.outputs.image_name }}"
        run: |
          set -euo pipefail
          REPO_NAME="${REPOSITORY##*/}"
          TAG_CLEAN="${TAG#v}"
          TIMESTAMP=$(date +%Y%m%d)
          RAW_SLUG="${TIMESTAMP}-${REPO_NAME}-${TAG_CLEAN}-release"
          RAW_SLUG="${RAW_SLUG,,}"
          SLUG=$(echo "${RAW_SLUG}" \
            | sed 's/[^a-z0-9_-]/-/g' \
            | sed -E 's/-{2,}/-/g' \
            | sed -E 's/_{2,}/_/g' \
            | sed -E 's/^[-_]+//; s/[-_]+$//')
          if [[ -z "${SLUG}" ]]; then
            SLUG="${TIMESTAMP}-release"
          fi
          if [[ ${#SLUG} -gt 50 ]]; then
            SLUG="${SLUG:0:50}"
            SLUG=$(echo "${SLUG}" | sed -E 's/[-_]+$//')
          fi
          while [[ ${#SLUG} -lt 12 ]]; do
            SLUG="${SLUG}x"
          done
          if [[ ! "${SLUG}" =~ ^[a-z0-9_-]{12,50}$ ]]; then
            echo "生成されたslug '${SLUG}' が制約を満たしません" >&2
            exit 1
          fi
          FILENAME="${SLUG}.md"
          FILEPATH="zenn-repo/articles/${FILENAME}"
          echo "Creating Zenn article: ${FILEPATH}"
          mkdir -p "zenn-repo/articles"
          if echo "${ZENN_CONTENT}" | grep -q '<article>'; then
            echo "${ZENN_CONTENT}" | perl -0777 -pe 's/^.*?<article>\s*(.*)\s*<\/article>.*$/\1/s' > "${FILEPATH}"
            echo "✅ Created Zenn article: ${FILENAME} (extracted from article tags)"
          else
            echo "${ZENN_CONTENT}" > "${FILEPATH}"
            echo "✅ Created Zenn article: ${FILENAME} (used as-is)"
          fi
          echo "zenn_filename=${FILENAME}" >> "$GITHUB_OUTPUT"
          echo "zenn_filepath=${FILEPATH}" >> "$GITHUB_OUTPUT"

      - name: Commit and push Zenn article
        env:
          TAG: "${{ steps.ctx.outputs.tag }}"
          REPOSITORY: "${{ github.repository }}"
          GITHUB_TOKEN: "${{ secrets.ZENN_REPO_TOKEN }}"
        run: |
          set -euo pipefail
          cd zenn-repo
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add articles/
          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit \
              -m "📝 Add release article for ${REPOSITORY} ${TAG}" \
              -m "Generated from: ${REPOSITORY}/releases/tag/${TAG}" \
              -m "Generated at: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
            git push
            echo "✅ Committed and pushed Zenn article"
          fi
